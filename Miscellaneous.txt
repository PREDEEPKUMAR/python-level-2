Miscellaneous Commands:

python --version     --> prints the python version 
easy_install --version --> prints the easy_install tool version


django-admin or manage.py --> Django's Command line utility for admin tasks
Syntax:

	django-admin <command> [options] or
	manage.py <command> [options]
	
	where, 
		command = One of the Command listed below
		options = Zero or more options ( This is Optional)	
	
	List of Commands:  (https://docs.djangoproject.com/en/2.1/ref/django-admin/)
	1. help : display usage information and a list of the commands provided by each application.
	2. help --commands : display a list of all available commands
	3. help <command>  : display a description of the given command and a list of its available options
	4. version :  display the current Django version
	5. check [app_label [app_label ...]] : inspect the entire Django project for common problems. You can check a subset of apps by providing a list of app labels as arguments  Link: https://docs.djangoproject.com/en/2.1/ref/checks/
	6. createcachetable : Creates the cache tables with backend info from settings file
	7. dbshell : Runs the Command-Line Client for Database Engine Specified in your ENGINE settings along with Connection parameters
		For PostgreSQL, this runs the psql command-line client.
		For MySQL, this runs the mysql command-line client.
		For SQLite, this runs the sqlite3 command-line client.
		For Oracle, this runs the sqlplus command-line client.
	8. diffsettings  : Displays differences between the current settings file and Django’s default settings. Settings that don’t appear in the defaults are followed by "###"
	9. dumpdata  : Serialization of Database Data from Models on all Apps takes place. Dumped Data can be used in loaddata command. 
		django-admin dumpdata [app_label[.ModelName] [app_label[.ModelName] ...]]   -- Selection/Restriction of app is also available.
	10. loaddata : De-Serialization of Database tables with values happens here. 
		django-admin loaddata fixture [fixture ...]
		where: fixtures are files like json, xml or database files
		Link: https://docs.djangoproject.com/en/2.1/ref/django-admin/   --> look for loaddata
	11. flush  : Removes all data from the database and re-executes any post-synchronization handlers
	12. inspectdb : Introspects the database tables in the database pointed-to by the NAME setting and outputs a Django model module (a models.py file) to standard output
	13. makemessages : Runs over the entire source tree of the current directory and pulls out all strings marked for translation. 
	14. compilemessages : Compiles .po files created by makemessages to .mo files for use with the built-in gettext support. Link: https://docs.djangoproject.com/en/2.1/topics/i18n/
	15. makemigrations  : Creates new migrations based on the changes detected to your models. App Name can also be specified for more feasible options.
	16. migrate  : Synchronizes the database state with the current set of models and migrations. 
		django-admin migrate [app_label] [migration_name] 
	17. runserver : Starts a lightweight development Web server on the local machine.
		django-admin runserver [addrport]
	18. shell  : Starts the Python interactive interpreter
	19. sendtestemail  : Sends a test email (to confirm email sending through Django is working) to the recipient(s) specified
	20. showmigrations : Shows all migrations in a project. You can choose from one of two formats
	21. sqlflush : Prints the SQL statements that would be executed for the flush command
	22. sqlmigrate  : Prints the SQL for the named migration
	23. sqlsequencereset  : Prints the SQL statements for resetting sequences for the given app name(s).
	24. startapp <name>  : Creates a Django app directory structure for the given app name in the current directory or the given destination
	25. startproject <name>  : Creates a Django project directory structure for the given project name in the current directory or the given destination
	26. test  : Runs tests for all installed apps
	27. testserver  : Runs a Django development server (as in runserver) using data from the given fixture(s).
	
	Some commands are only available when the django.contrib application that implements them has been enabled. 
	
	django.contrib.auth:: command is only available if Django’s authentication system (django.contrib.auth) is installed
	28. changepassword [<username>]  :  Allows changing a user’s password.
	29. createsuperuser  : Creates a superuser account (a user who has all permissions).
	
	django.contrib.contenttypes
	30. remove_stale_contenttypes  : Deletes stale content types (from deleted models) in your database
	
	django.contrib.sessions
	31. clearsessions : Can be run as a cron job or directly to clean out expired sessions.
	
	
django-admin --version --> prints the Django Version. The Tool will be available only after Django Installation
django-admin help --> displays the list of subcommands available in django-admin